# Ex.No: 10 Learning â€“ Use Supervised Learning  
### DATE:                                                                            
### REGISTER NUMBER : 
### AIM: 
To write a program to train the classifier for -----------------.
###  Algorithm:

### Program:
```py 
import numpy as np
import pandas as pd
import gradio as gr
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier

data = pd.read_csv('/content/diabetes.csv')
data.head()

x = data.drop(['Outcome'], axis=1)
y = data['Outcome']
print(x[:5])

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

model = MLPClassifier(max_iter=1000, alpha=1)
model.fit(x_train_scaled, y_train)
print("Model Accuracy on training set:", model.score(x_train_scaled, y_train))
print("Model Accuracy on test set:", model.score(x_test_scaled, y_test))

def diabetes(Pregnancies, Glucose, Blood_Pressure, SkinThickness, Insulin, BMI, Diabetes_Pedigree_Function, Age):
    x = np.array([Pregnancies, Glucose, Blood_Pressure, SkinThickness, Insulin, BMI, Diabetes_Pedigree_Function, Age])
    x = scaler.transform(x.reshape(1, -1))  # Scale input data
    prediction = model.predict(x)
    if prediction == 0:
        return "NO"
    else:
        return "YES"

print(diabetes(2, 148, 72, 35, 0, 33.6, 0.627, 50))
```
### Result:
Thus the system was trained successfully and the prediction was carried out.
